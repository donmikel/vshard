test_run = require('test_run').new()
---
...
REPLICASET_1 = { 'storage_1_a', 'storage_1_b' }
---
...
REPLICASET_2 = { 'storage_2_a', 'storage_2_b' }
---
...
test_run:create_cluster(REPLICASET_1, 'storage')
---
...
test_run:create_cluster(REPLICASET_2, 'storage')
---
...
util = require('util')
---
...
util.wait_master(test_run, REPLICASET_1, 'storage_1_a')
---
...
util.wait_master(test_run, REPLICASET_2, 'storage_2_a')
---
...
test_run:switch('storage_1_a')
---
- true
...
vshard.storage.bucket_force_create(1, vshard.consts.DEFAULT_BUCKET_COUNT / 2)
---
- true
...
test_run:switch('storage_2_a')
---
- true
...
fiber = require('fiber')
---
...
vshard.storage.bucket_force_create(vshard.consts.DEFAULT_BUCKET_COUNT / 2 + 1, vshard.consts.DEFAULT_BUCKET_COUNT / 2)
---
- true
...
--
-- Gh-72: allow reload. Test simple reload, error during
-- reloading, ensure the fibers are restarted on reload.
--
assert(rawget(_G, '__module_vshard_storage') ~= nil)
---
- true
...
vshard.storage.module_version()
---
- 0
...
while test_run:grep_log('storage_2_a', 'The cluster is balanced ok') == nil do vshard.storage.rebalancer_wakeup() fiber.sleep(0.1) end
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function check_reloaded()
	for k, v in pairs(old_internal) do
		if v == vshard.storage.internal[k] then
			return k
		end
	end
end;
---
...
function check_not_reloaded()
	for k, v in pairs(old_internal) do
		if v ~= vshard.storage.internal[k] then
			return k
		end
	end
end;
---
...
function copy_functions(t)
	local ret = {}
	for k, v in pairs(t) do
		if type(v) == 'function' then
			ret[k] = v
		end
	end
	return ret
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
--
-- Simple reload. All functions are reloaded and they have
-- another pointers in vshard.storage.internal.
--
old_internal = copy_functions(vshard.storage.internal)
---
...
package.loaded["vshard.storage"] = nil
---
...
_ = require('vshard.storage')
---
...
vshard.storage.module_version()
---
- 1
...
check_reloaded()
---
...
while test_run:grep_log('storage_2_a', 'Garbage collector has been reloaded') == nil do fiber.sleep(0.1) end
---
...
while test_run:grep_log('storage_2_a', 'Recovery has been reloaded') == nil do fiber.sleep(0.1) vshard.storage.recovery_wakeup() end
---
...
while test_run:grep_log('storage_2_a', 'Rebalancer has been reloaded') == nil do fiber.sleep(0.1) vshard.storage.rebalancer_wakeup() end
---
...
check_reloaded()
---
...
--
-- Error during reload - in such a case no function can be
-- updated. Reload is atomic.
--
vshard.storage.internal.errinj.ERRINJ_RELOAD = true
---
...
old_internal = copy_functions(vshard.storage.internal)
---
...
package.loaded["vshard.storage"] = nil
---
...
util = require('util')
---
...
util.check_error(require, 'vshard.storage')
---
- 'Error injection: reload'
...
check_not_reloaded()
---
...
vshard.storage.module_version()
---
- 1
...
--
-- A next reload is ok, and all functions are updated.
--
vshard.storage.internal.errinj.ERRINJ_RELOAD = false
---
...
old_internal = copy_functions(vshard.storage.internal)
---
...
package.loaded["vshard.storage"] = nil
---
...
_ = require('vshard.storage')
---
...
vshard.storage.module_version()
---
- 2
...
check_reloaded()
---
...
--
-- Outdate old replicaset and replica objets.
--
_, rs = next(vshard.storage.internal.replicasets)
---
...
package.loaded["vshard.storage"] = nil
---
...
_ = require('vshard.storage')
---
...
rs.callro(rs, 'echo', {'some_data'})
---
- null
- type: ShardingError
  name: OBJECT_IS_OUTDATED
  message: Object is outdated after module reload/reconfigure. Use new instance.
  code: 20
...
_, rs = next(vshard.storage.internal.replicasets)
---
...
rs.callro(rs, 'echo', {'some_data'})
---
- some_data
- null
- null
...
-- Error during reload process.
_, rs = next(vshard.storage.internal.replicasets)
---
...
rs:callro('echo', {'some_data'})
---
- some_data
- null
- null
...
vshard.storage.internal.errinj.ERRINJ_CFG = true
---
...
old_internal = table.copy(vshard.storage.internal)
---
...
package.loaded["vshard.storage"] = nil
---
...
_, err = pcall(require, 'vshard.storage')
---
...
err:match('Error injection:.*')
---
- 'Error injection: cfg'
...
vshard.storage.internal.errinj.ERRINJ_CFG = false
---
...
util.has_same_fields(old_internal, vshard.storage.internal)
---
- true
...
_, rs = next(vshard.storage.internal.replicasets)
---
...
_ = rs:callro('echo', {'some_data'})
---
...
test_run:switch('default')
---
- true
...
test_run:drop_cluster(REPLICASET_2)
---
...
test_run:drop_cluster(REPLICASET_1)
---
...
test_run:cmd('clear filter')
---
- true
...
